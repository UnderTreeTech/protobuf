// 定义项目 API 的 proto 文件 可以同时描述 gRPC 和 HTTP API
// protobuf 文件参考:
//  - https://developers.google.com/protocol-buffers/

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: stardust.proto

package stardust

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BizType int64 `protobuf:"varint,1,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	Len     int64 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *IdReq) Reset() {
	*x = IdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardust_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReq) ProtoMessage() {}

func (x *IdReq) ProtoReflect() protoreflect.Message {
	mi := &file_stardust_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReq.ProtoReflect.Descriptor instead.
func (*IdReq) Descriptor() ([]byte, []int) {
	return file_stardust_proto_rawDescGZIP(), []int{0}
}

func (x *IdReq) GetBizType() int64 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *IdReq) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

type IdsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *IdsReply) Reset() {
	*x = IdsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardust_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdsReply) ProtoMessage() {}

func (x *IdsReply) ProtoReflect() protoreflect.Message {
	mi := &file_stardust_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdsReply.ProtoReflect.Descriptor instead.
func (*IdsReply) Descriptor() ([]byte, []int) {
	return file_stardust_proto_rawDescGZIP(), []int{1}
}

func (x *IdsReply) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type IdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdReply) Reset() {
	*x = IdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardust_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdReply) ProtoMessage() {}

func (x *IdReply) ProtoReflect() protoreflect.Message {
	mi := &file_stardust_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdReply.ProtoReflect.Descriptor instead.
func (*IdReply) Descriptor() ([]byte, []int) {
	return file_stardust_proto_rawDescGZIP(), []int{2}
}

func (x *IdReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ParseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ParseReq) Reset() {
	*x = ParseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardust_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseReq) ProtoMessage() {}

func (x *ParseReq) ProtoReflect() protoreflect.Message {
	mi := &file_stardust_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseReq.ProtoReflect.Descriptor instead.
func (*ParseReq) Descriptor() ([]byte, []int) {
	return file_stardust_proto_rawDescGZIP(), []int{3}
}

func (x *ParseReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ParseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time     int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Idc      int64 `protobuf:"varint,2,opt,name=idc,proto3" json:"idc,omitempty"`
	Worker   int64 `protobuf:"varint,3,opt,name=worker,proto3" json:"worker,omitempty"`
	BizType  int64 `protobuf:"varint,4,opt,name=biz_type,json=bizType,proto3" json:"biz_type,omitempty"`
	Sequence int64 `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *ParseReply) Reset() {
	*x = ParseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stardust_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseReply) ProtoMessage() {}

func (x *ParseReply) ProtoReflect() protoreflect.Message {
	mi := &file_stardust_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseReply.ProtoReflect.Descriptor instead.
func (*ParseReply) Descriptor() ([]byte, []int) {
	return file_stardust_proto_rawDescGZIP(), []int{4}
}

func (x *ParseReply) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ParseReply) GetIdc() int64 {
	if x != nil {
		return x.Idc
	}
	return 0
}

func (x *ParseReply) GetWorker() int64 {
	if x != nil {
		return x.Worker
	}
	return 0
}

func (x *ParseReply) GetBizType() int64 {
	if x != nil {
		return x.BizType
	}
	return 0
}

func (x *ParseReply) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

var File_stardust_proto protoreflect.FileDescriptor

var file_stardust_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x75, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x75,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x34, 0x0a, 0x05, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x1c, 0x0a, 0x08, 0x49, 0x64, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x19, 0x0a, 0x07, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x81, 0x01,
	0x0a, 0x0a, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69,
	0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x69,
	0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x32, 0xa1, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x44, 0x75, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x64, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64,
	0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x64, 0x75, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x07, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x64, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x64, 0x75, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x73, 0x74, 0x61, 0x72, 0x64,
	0x75, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stardust_proto_rawDescOnce sync.Once
	file_stardust_proto_rawDescData = file_stardust_proto_rawDesc
)

func file_stardust_proto_rawDescGZIP() []byte {
	file_stardust_proto_rawDescOnce.Do(func() {
		file_stardust_proto_rawDescData = protoimpl.X.CompressGZIP(file_stardust_proto_rawDescData)
	})
	return file_stardust_proto_rawDescData
}

var file_stardust_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_stardust_proto_goTypes = []interface{}{
	(*IdReq)(nil),         // 0: service.stardust.v1.IdReq
	(*IdsReply)(nil),      // 1: service.stardust.v1.IdsReply
	(*IdReply)(nil),       // 2: service.stardust.v1.IdReply
	(*ParseReq)(nil),      // 3: service.stardust.v1.ParseReq
	(*ParseReply)(nil),    // 4: service.stardust.v1.ParseReply
	(*emptypb.Empty)(nil), // 5: google.protobuf.Empty
}
var file_stardust_proto_depIdxs = []int32{
	5, // 0: service.stardust.v1.StarDust.Ping:input_type -> google.protobuf.Empty
	0, // 1: service.stardust.v1.StarDust.GetUniqueIds:input_type -> service.stardust.v1.IdReq
	0, // 2: service.stardust.v1.StarDust.GetUniqueId:input_type -> service.stardust.v1.IdReq
	3, // 3: service.stardust.v1.StarDust.ParseId:input_type -> service.stardust.v1.ParseReq
	5, // 4: service.stardust.v1.StarDust.Ping:output_type -> google.protobuf.Empty
	1, // 5: service.stardust.v1.StarDust.GetUniqueIds:output_type -> service.stardust.v1.IdsReply
	2, // 6: service.stardust.v1.StarDust.GetUniqueId:output_type -> service.stardust.v1.IdReply
	4, // 7: service.stardust.v1.StarDust.ParseId:output_type -> service.stardust.v1.ParseReply
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stardust_proto_init() }
func file_stardust_proto_init() {
	if File_stardust_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stardust_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardust_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardust_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardust_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stardust_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stardust_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stardust_proto_goTypes,
		DependencyIndexes: file_stardust_proto_depIdxs,
		MessageInfos:      file_stardust_proto_msgTypes,
	}.Build()
	File_stardust_proto = out.File
	file_stardust_proto_rawDesc = nil
	file_stardust_proto_goTypes = nil
	file_stardust_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StarDustClient is the client API for StarDust service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StarDustClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUniqueIds(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdsReply, error)
	GetUniqueId(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdReply, error)
	ParseId(ctx context.Context, in *ParseReq, opts ...grpc.CallOption) (*ParseReply, error)
}

type starDustClient struct {
	cc grpc.ClientConnInterface
}

func NewStarDustClient(cc grpc.ClientConnInterface) StarDustClient {
	return &starDustClient{cc}
}

func (c *starDustClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/service.stardust.v1.StarDust/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starDustClient) GetUniqueIds(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdsReply, error) {
	out := new(IdsReply)
	err := c.cc.Invoke(ctx, "/service.stardust.v1.StarDust/GetUniqueIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starDustClient) GetUniqueId(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/service.stardust.v1.StarDust/GetUniqueId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starDustClient) ParseId(ctx context.Context, in *ParseReq, opts ...grpc.CallOption) (*ParseReply, error) {
	out := new(ParseReply)
	err := c.cc.Invoke(ctx, "/service.stardust.v1.StarDust/ParseId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarDustServer is the server API for StarDust service.
type StarDustServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetUniqueIds(context.Context, *IdReq) (*IdsReply, error)
	GetUniqueId(context.Context, *IdReq) (*IdReply, error)
	ParseId(context.Context, *ParseReq) (*ParseReply, error)
}

// UnimplementedStarDustServer can be embedded to have forward compatible implementations.
type UnimplementedStarDustServer struct {
}

func (*UnimplementedStarDustServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedStarDustServer) GetUniqueIds(context.Context, *IdReq) (*IdsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueIds not implemented")
}
func (*UnimplementedStarDustServer) GetUniqueId(context.Context, *IdReq) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueId not implemented")
}
func (*UnimplementedStarDustServer) ParseId(context.Context, *ParseReq) (*ParseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseId not implemented")
}

func RegisterStarDustServer(s *grpc.Server, srv StarDustServer) {
	s.RegisterService(&_StarDust_serviceDesc, srv)
}

func _StarDust_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarDustServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.stardust.v1.StarDust/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarDustServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarDust_GetUniqueIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarDustServer).GetUniqueIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.stardust.v1.StarDust/GetUniqueIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarDustServer).GetUniqueIds(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarDust_GetUniqueId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarDustServer).GetUniqueId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.stardust.v1.StarDust/GetUniqueId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarDustServer).GetUniqueId(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarDust_ParseId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarDustServer).ParseId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.stardust.v1.StarDust/ParseId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarDustServer).ParseId(ctx, req.(*ParseReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StarDust_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.stardust.v1.StarDust",
	HandlerType: (*StarDustServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _StarDust_Ping_Handler,
		},
		{
			MethodName: "GetUniqueIds",
			Handler:    _StarDust_GetUniqueIds_Handler,
		},
		{
			MethodName: "GetUniqueId",
			Handler:    _StarDust_GetUniqueId_Handler,
		},
		{
			MethodName: "ParseId",
			Handler:    _StarDust_ParseId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stardust.proto",
}
