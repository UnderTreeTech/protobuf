// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stardust.proto

package stardust

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IdReq struct {
	BizType              int64    `protobuf:"varint,1,opt,name=biz_type,json=bizType,proto3" json:"biz_type" form:"biz_type" validate:"required,gte=0,lte=32"`
	Len                  int64    `protobuf:"varint,2,opt,name=len,proto3" json:"len" form:"len" validate:"required,gte=0,lte=1000"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdReq) Reset()         { *m = IdReq{} }
func (m *IdReq) String() string { return proto.CompactTextString(m) }
func (*IdReq) ProtoMessage()    {}
func (*IdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d205f85c3caec6, []int{0}
}
func (m *IdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdReq.Merge(m, src)
}
func (m *IdReq) XXX_Size() int {
	return m.Size()
}
func (m *IdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IdReq.DiscardUnknown(m)
}

var xxx_messageInfo_IdReq proto.InternalMessageInfo

type IdReply struct {
	Ids                  []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdReply) Reset()         { *m = IdReply{} }
func (m *IdReply) String() string { return proto.CompactTextString(m) }
func (*IdReply) ProtoMessage()    {}
func (*IdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_71d205f85c3caec6, []int{1}
}
func (m *IdReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdReply.Merge(m, src)
}
func (m *IdReply) XXX_Size() int {
	return m.Size()
}
func (m *IdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IdReply.DiscardUnknown(m)
}

var xxx_messageInfo_IdReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IdReq)(nil), "service.stardust.v1.IdReq")
	proto.RegisterType((*IdReply)(nil), "service.stardust.v1.IdReply")
}

func init() { proto.RegisterFile("stardust.proto", fileDescriptor_71d205f85c3caec6) }

var fileDescriptor_71d205f85c3caec6 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2e, 0x49, 0x2c,
	0x4a, 0x29, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2e, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x83, 0x8b, 0x97, 0x19, 0x4a, 0xe9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26,
	0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe7, 0xa7, 0xe7, 0xeb, 0x83, 0xd5, 0x26, 0x95, 0xa6, 0x81,
	0x79, 0x60, 0x0e, 0x98, 0x05, 0x31, 0x43, 0x69, 0x03, 0x23, 0x17, 0xab, 0x67, 0x4a, 0x50, 0x6a,
	0xa1, 0x50, 0x34, 0x17, 0x47, 0x52, 0x66, 0x55, 0x7c, 0x49, 0x65, 0x41, 0xaa, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0xb3, 0x93, 0xc3, 0xab, 0x7b, 0xf2, 0x70, 0xb1, 0x4f, 0xf7, 0xe4, 0x0d, 0xd2, 0xf2,
	0x8b, 0x72, 0xad, 0x94, 0x60, 0x22, 0x4a, 0x0a, 0x65, 0x89, 0x39, 0x99, 0x29, 0x89, 0x25, 0xa9,
	0x56, 0x4a, 0x45, 0xa9, 0x85, 0xa5, 0x99, 0x45, 0xa9, 0x29, 0x3a, 0xe9, 0x25, 0xa9, 0xb6, 0x06,
	0x3a, 0x39, 0x25, 0xa9, 0xb6, 0xc6, 0x46, 0x4a, 0x41, 0xec, 0x49, 0x99, 0x55, 0x21, 0x95, 0x05,
	0xa9, 0x42, 0x5e, 0x5c, 0xcc, 0x39, 0xa9, 0x79, 0x12, 0x4c, 0x60, 0x73, 0x2d, 0x5e, 0xdd, 0x93,
	0x07, 0x71, 0x3f, 0xdd, 0x93, 0xd7, 0x85, 0x18, 0x99, 0x93, 0x9a, 0x47, 0xc0, 0x34, 0x43, 0x03,
	0x03, 0x03, 0xa5, 0x20, 0x90, 0x2e, 0x25, 0x69, 0x2e, 0x76, 0x90, 0x8b, 0x0b, 0x72, 0x2a, 0x85,
	0x04, 0xb8, 0x98, 0x33, 0x53, 0x8a, 0x25, 0x18, 0x15, 0x98, 0x35, 0x98, 0x83, 0x40, 0x4c, 0xa3,
	0x10, 0x2e, 0x8e, 0xe0, 0x92, 0xc4, 0x22, 0x97, 0xd2, 0xe2, 0x12, 0x21, 0x0f, 0x2e, 0x1e, 0xf7,
	0xd4, 0x92, 0xd0, 0xbc, 0xcc, 0xc2, 0xd2, 0x54, 0xcf, 0x94, 0x62, 0x21, 0x29, 0x3d, 0x2c, 0x01,
	0xa6, 0x07, 0xf6, 0xbd, 0x94, 0x0c, 0x4e, 0xb9, 0x82, 0x9c, 0x4a, 0x27, 0xb9, 0x13, 0x0f, 0xe5,
	0x18, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f,
	0xe5, 0x18, 0xa2, 0x38, 0x60, 0x4a, 0x93, 0xd8, 0xc0, 0x81, 0x69, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x10, 0xd5, 0xf6, 0x00, 0xa2, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StarDustClient is the client API for StarDust service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StarDustClient interface {
	GetUniqueIds(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdReply, error)
}

type starDustClient struct {
	cc *grpc.ClientConn
}

func NewStarDustClient(cc *grpc.ClientConn) StarDustClient {
	return &starDustClient{cc}
}

func (c *starDustClient) GetUniqueIds(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*IdReply, error) {
	out := new(IdReply)
	err := c.cc.Invoke(ctx, "/service.stardust.v1.StarDust/GetUniqueIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarDustServer is the server API for StarDust service.
type StarDustServer interface {
	GetUniqueIds(context.Context, *IdReq) (*IdReply, error)
}

// UnimplementedStarDustServer can be embedded to have forward compatible implementations.
type UnimplementedStarDustServer struct {
}

func (*UnimplementedStarDustServer) GetUniqueIds(ctx context.Context, req *IdReq) (*IdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueIds not implemented")
}

func RegisterStarDustServer(s *grpc.Server, srv StarDustServer) {
	s.RegisterService(&_StarDust_serviceDesc, srv)
}

func _StarDust_GetUniqueIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarDustServer).GetUniqueIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.stardust.v1.StarDust/GetUniqueIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarDustServer).GetUniqueIds(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StarDust_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.stardust.v1.StarDust",
	HandlerType: (*StarDustServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUniqueIds",
			Handler:    _StarDust_GetUniqueIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stardust.proto",
}

func (m *IdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Len != 0 {
		i = encodeVarintStardust(dAtA, i, uint64(m.Len))
		i--
		dAtA[i] = 0x10
	}
	if m.BizType != 0 {
		i = encodeVarintStardust(dAtA, i, uint64(m.BizType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IdReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintStardust(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStardust(dAtA []byte, offset int, v uint64) int {
	offset -= sovStardust(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BizType != 0 {
		n += 1 + sovStardust(uint64(m.BizType))
	}
	if m.Len != 0 {
		n += 1 + sovStardust(uint64(m.Len))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovStardust(uint64(e))
		}
		n += 1 + sovStardust(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStardust(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStardust(x uint64) (n int) {
	return sovStardust(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStardust
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizType", wireType)
			}
			m.BizType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStardust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BizType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStardust
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Len |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStardust(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStardust
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStardust
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStardust
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStardust
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStardust
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStardust
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStardust
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStardust
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStardust(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStardust
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStardust
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStardust(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStardust
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStardust
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStardust
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStardust
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStardust
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStardust
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStardust        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStardust          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStardust = fmt.Errorf("proto: unexpected end of group")
)
