// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: user.proto

package user

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathUserGetStaffInfo = "/service.user.v1.User/GetStaffInfo"
var PathUserDelStaff = "/service.user.v1.User/DelStaff"
var PathUserPing = "/service.user.v1.User/Ping"
var PathUserGetAppSecret = "/service.user.v1.User/GetAppSecret"
var PathUserGetAppSkipUrls = "/service.user.v1.User/GetAppSkipUrls"
var PathUserTestValidator = "/user/validate"

// UserBMServer is the server API for User service.
// Service Definition
type UserBMServer interface {
	GetStaffInfo(ctx context.Context, req *StaffInfoReq) (resp *StaffInfoReply, err error)

	DelStaff(ctx context.Context, req *StaffInfoReq) (resp *google_protobuf1.Empty, err error)

	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	GetAppSecret(ctx context.Context, req *AppReq) (resp *AppReply, err error)

	GetAppSkipUrls(ctx context.Context, req *AppReq) (resp *SkipUrlsReply, err error)

	TestValidator(ctx context.Context, req *ValidateReq) (resp *google_protobuf1.Empty, err error)
}

var UserSvc UserBMServer

func userGetStaffInfo(c *bm.Context) {
	p := new(StaffInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.GetStaffInfo(c, p)
	c.JSON(resp, err)
}

func userDelStaff(c *bm.Context) {
	p := new(StaffInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.DelStaff(c, p)
	c.JSON(resp, err)
}

func userPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.Ping(c, p)
	c.JSON(resp, err)
}

func userGetAppSecret(c *bm.Context) {
	p := new(AppReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.GetAppSecret(c, p)
	c.JSON(resp, err)
}

func userGetAppSkipUrls(c *bm.Context) {
	p := new(AppReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.GetAppSkipUrls(c, p)
	c.JSON(resp, err)
}

func userTestValidator(c *bm.Context) {
	p := new(ValidateReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := UserSvc.TestValidator(c, p)
	c.JSON(resp, err)
}

// RegisterUserBMServer Register the blademaster route
func RegisterUserBMServer(e *bm.Engine, server UserBMServer) {
	UserSvc = server
	e.GET("/service.user.v1.User/GetStaffInfo", userGetStaffInfo)
	e.GET("/service.user.v1.User/DelStaff", userDelStaff)
	e.GET("/service.user.v1.User/Ping", userPing)
	e.GET("/service.user.v1.User/GetAppSecret", userGetAppSecret)
	e.GET("/service.user.v1.User/GetAppSkipUrls", userGetAppSkipUrls)
	e.POST("/user/validate", userTestValidator)
}
