// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package user

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StaffInfoReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	ShopId               int64    `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id,omitempty" form:"shop_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaffInfoReq) Reset()         { *m = StaffInfoReq{} }
func (m *StaffInfoReq) String() string { return proto.CompactTextString(m) }
func (*StaffInfoReq) ProtoMessage()    {}
func (*StaffInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}
func (m *StaffInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaffInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StaffInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StaffInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaffInfoReq.Merge(m, src)
}
func (m *StaffInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *StaffInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StaffInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_StaffInfoReq proto.InternalMessageInfo

type StaffInfoReply struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	StaffName            string   `protobuf:"bytes,2,opt,name=staff_name,json=staffName,proto3" json:"staff_name"`
	NickName             string   `protobuf:"bytes,3,opt,name=nick_name,json=nickName,proto3" json:"nick_name"`
	Mobile               string   `protobuf:"bytes,4,opt,name=mobile,proto3" json:"phone"`
	Birthday             string   `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday"`
	Gender               string   `protobuf:"bytes,6,opt,name=gender,proto3" json:"sex"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaffInfoReply) Reset()         { *m = StaffInfoReply{} }
func (m *StaffInfoReply) String() string { return proto.CompactTextString(m) }
func (*StaffInfoReply) ProtoMessage()    {}
func (*StaffInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}
func (m *StaffInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaffInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StaffInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StaffInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaffInfoReply.Merge(m, src)
}
func (m *StaffInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *StaffInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StaffInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_StaffInfoReply proto.InternalMessageInfo

type AppReq struct {
	Sappkey              string   `protobuf:"bytes,1,opt,name=sappkey,proto3" json:"sappkey,omitempty" form:"sappkey" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppReq) Reset()         { *m = AppReq{} }
func (m *AppReq) String() string { return proto.CompactTextString(m) }
func (*AppReq) ProtoMessage()    {}
func (*AppReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}
func (m *AppReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppReq.Merge(m, src)
}
func (m *AppReq) XXX_Size() int {
	return m.Size()
}
func (m *AppReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppReq proto.InternalMessageInfo

type AppReply struct {
	Appkey               string   `protobuf:"bytes,1,opt,name=appkey,proto3" json:"app_key"`
	Appsecret            string   `protobuf:"bytes,2,opt,name=appsecret,proto3" json:"app_secret"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppReply) Reset()         { *m = AppReply{} }
func (m *AppReply) String() string { return proto.CompactTextString(m) }
func (*AppReply) ProtoMessage()    {}
func (*AppReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{3}
}
func (m *AppReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppReply.Merge(m, src)
}
func (m *AppReply) XXX_Size() int {
	return m.Size()
}
func (m *AppReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppReply proto.InternalMessageInfo

type SkipUrlsReply struct {
	Urls                 []string `protobuf:"bytes,1,rep,name=urls,proto3" json:"urls"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkipUrlsReply) Reset()         { *m = SkipUrlsReply{} }
func (m *SkipUrlsReply) String() string { return proto.CompactTextString(m) }
func (*SkipUrlsReply) ProtoMessage()    {}
func (*SkipUrlsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{4}
}
func (m *SkipUrlsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkipUrlsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkipUrlsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkipUrlsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkipUrlsReply.Merge(m, src)
}
func (m *SkipUrlsReply) XXX_Size() int {
	return m.Size()
}
func (m *SkipUrlsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SkipUrlsReply.DiscardUnknown(m)
}

var xxx_messageInfo_SkipUrlsReply proto.InternalMessageInfo

type ValidateReq struct {
	Email                string     `protobuf:"bytes,1,opt,name=email,proto3" json:"email" form:"email" validate:"required,email"`
	Name                 string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name" validate:"required,min=6,max=10"`
	Password             string     `protobuf:"bytes,3,opt,name=password,proto3" json:"password" form:"password" validate:"required,min=6,max=10"`
	Sex                  int32      `protobuf:"varint,4,opt,name=sex,proto3" json:"sex" form:"sex" validate:"required,gte=0,lte=2"`
	Age                  int32      `protobuf:"varint,5,opt,name=age,proto3" json:"age" form:"age" validate:"required,gte=1,lte=60,gtefield=Sex"`
	Addr                 []*Address `protobuf:"bytes,6,rep,name=addr,proto3" json:"addr" form:"addr" validate:"required,gt=0,dive"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ValidateReq) Reset()         { *m = ValidateReq{} }
func (m *ValidateReq) String() string { return proto.CompactTextString(m) }
func (*ValidateReq) ProtoMessage()    {}
func (*ValidateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{5}
}
func (m *ValidateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateReq.Merge(m, src)
}
func (m *ValidateReq) XXX_Size() int {
	return m.Size()
}
func (m *ValidateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateReq.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateReq proto.InternalMessageInfo

type Address struct {
	Mobile               string         `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile" form:"mobile" validate:"required,mobile,min=6,max=20"`
	Address              string         `protobuf:"bytes,2,opt,name=address,proto3" json:"address" form:"address" validate:"required,max=100"`
	App                  *AppReq        `protobuf:"bytes,3,opt,name=app,proto3" json:"app"`
	Reply                *SkipUrlsReply `protobuf:"bytes,4,opt,name=reply,proto3" json:"reply"`
	Resp                 []*AppReply    `protobuf:"bytes,5,rep,name=resp,proto3" json:"resp"`
	Urls                 []string       `protobuf:"bytes,6,rep,name=urls,proto3" json:"urls"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{6}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StaffInfoReq)(nil), "styd.service.user.v1.StaffInfoReq")
	proto.RegisterType((*StaffInfoReply)(nil), "styd.service.user.v1.StaffInfoReply")
	proto.RegisterType((*AppReq)(nil), "styd.service.user.v1.AppReq")
	proto.RegisterType((*AppReply)(nil), "styd.service.user.v1.AppReply")
	proto.RegisterType((*SkipUrlsReply)(nil), "styd.service.user.v1.SkipUrlsReply")
	proto.RegisterType((*ValidateReq)(nil), "styd.service.user.v1.ValidateReq")
	proto.RegisterType((*Address)(nil), "styd.service.user.v1.Address")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5b, 0x6b, 0x1b, 0x47,
	0x14, 0x8e, 0xee, 0xd2, 0xc8, 0x36, 0x65, 0x28, 0x46, 0xa8, 0x8e, 0xd6, 0x9e, 0x94, 0xe0, 0x06,
	0x59, 0x92, 0x15, 0xe2, 0xa6, 0xa1, 0xa2, 0xb1, 0x9a, 0x36, 0xb8, 0x84, 0x52, 0x56, 0x75, 0x29,
	0xbd, 0x60, 0x46, 0x9e, 0xd1, 0x6a, 0xf0, 0x6a, 0x77, 0xb2, 0xbb, 0x72, 0xad, 0xd7, 0xfc, 0x80,
	0xbe, 0x14, 0x4a, 0x7f, 0x52, 0x1e, 0x0b, 0x7d, 0x5f, 0x5a, 0xb7, 0x50, 0xd0, 0x5b, 0xf5, 0x0b,
	0xca, 0x9c, 0x19, 0xc9, 0x32, 0xac, 0x6c, 0xbf, 0x48, 0x7b, 0x2e, 0xdf, 0x77, 0xe6, 0xdc, 0x66,
	0x10, 0x1a, 0x87, 0x3c, 0x68, 0xc8, 0xc0, 0x8f, 0x7c, 0xfc, 0x6e, 0x18, 0x4d, 0x58, 0x23, 0xe4,
	0xc1, 0xb9, 0x38, 0xe5, 0x0d, 0x30, 0x9c, 0xef, 0x57, 0xf7, 0x1c, 0x11, 0x0d, 0xc7, 0xfd, 0xc6,
	0xa9, 0x3f, 0x6a, 0x3a, 0xbe, 0xe3, 0x37, 0xc1, 0xb9, 0x3f, 0x1e, 0x80, 0x04, 0x02, 0x7c, 0x69,
	0x92, 0xea, 0x7b, 0x8e, 0xef, 0x3b, 0x2e, 0xbf, 0xf2, 0xe2, 0x23, 0x19, 0x4d, 0x8c, 0x71, 0xcb,
	0x18, 0xa9, 0x14, 0x4d, 0xea, 0x79, 0x7e, 0x44, 0x23, 0xe1, 0x7b, 0xa1, 0xb6, 0x92, 0x37, 0x29,
	0xb4, 0xd6, 0x8b, 0xe8, 0x60, 0x70, 0xe4, 0x0d, 0x7c, 0x9b, 0xbf, 0xc6, 0xfb, 0x28, 0x2d, 0x58,
	0x25, 0xb5, 0x9d, 0xda, 0xcd, 0x74, 0x77, 0x66, 0xb1, 0x75, 0x7f, 0xe0, 0x07, 0xa3, 0x67, 0x44,
	0x30, 0xb2, 0x7d, 0x4e, 0x5d, 0xc1, 0x68, 0xc4, 0x9f, 0x91, 0x80, 0xbf, 0x1e, 0x8b, 0x80, 0x33,
	0x62, 0xa7, 0x05, 0xc3, 0x9f, 0xa0, 0x42, 0x38, 0xf4, 0xe5, 0x89, 0x60, 0x95, 0x34, 0xe0, 0x1e,
	0xce, 0x62, 0x8b, 0x68, 0x9c, 0x31, 0x24, 0x83, 0xf3, 0xca, 0x7a, 0xc4, 0xc8, 0x7f, 0x29, 0xb4,
	0xb1, 0x74, 0x08, 0xe9, 0x4e, 0xf0, 0xe6, 0xd2, 0x31, 0xf2, 0xd3, 0xd8, 0x4a, 0x0b, 0x06, 0xb1,
	0xf6, 0x10, 0x0a, 0x95, 0xe7, 0x89, 0x47, 0x47, 0x1c, 0xc2, 0x95, 0xba, 0x1b, 0xd3, 0xd8, 0x5a,
	0xd2, 0xda, 0x25, 0xf8, 0xfe, 0x92, 0x8e, 0x38, 0x7e, 0x84, 0x4a, 0x9e, 0x38, 0x3d, 0xd3, 0xde,
	0x19, 0xf0, 0x5e, 0x9f, 0xc6, 0xd6, 0x95, 0xd2, 0x2e, 0xaa, 0x4f, 0xf0, 0xdd, 0x41, 0xf9, 0x91,
	0xdf, 0x17, 0x2e, 0xaf, 0x64, 0xc1, 0xb1, 0x34, 0x8d, 0xad, 0x9c, 0x1c, 0xfa, 0x1e, 0xb7, 0x8d,
	0x01, 0xef, 0xa2, 0x62, 0x5f, 0x04, 0xd1, 0x90, 0xd1, 0x49, 0x25, 0x07, 0x4e, 0x6b, 0xd3, 0xd8,
	0x5a, 0xe8, 0xec, 0xc5, 0x17, 0xb6, 0x50, 0xde, 0xe1, 0x1e, 0xe3, 0x41, 0x25, 0x0f, 0x7e, 0x85,
	0x69, 0x6c, 0x65, 0x42, 0x7e, 0x61, 0x1b, 0x35, 0xf9, 0x02, 0xe5, 0x0f, 0xa5, 0x54, 0x15, 0x7f,
	0x8e, 0x0a, 0x21, 0x95, 0xf2, 0x8c, 0x4f, 0x20, 0xdf, 0xd2, 0xb5, 0xf2, 0x69, 0x43, 0x72, 0xf9,
	0xe6, 0x30, 0xf2, 0x23, 0x2a, 0x02, 0x97, 0x2a, 0xdc, 0x03, 0x94, 0xbf, 0x46, 0x56, 0x9e, 0xc6,
	0x56, 0x81, 0x4a, 0x79, 0x72, 0xc6, 0x27, 0xb6, 0x31, 0xe1, 0x3a, 0x2a, 0x51, 0x29, 0x43, 0x7e,
	0x1a, 0xf0, 0x68, 0xb9, 0x88, 0xca, 0x4f, 0x6b, 0xed, 0x2b, 0x07, 0xb2, 0x87, 0xd6, 0x7b, 0x67,
	0x42, 0x1e, 0x07, 0x6e, 0xa8, 0x63, 0x6c, 0xa1, 0xec, 0x38, 0x70, 0xc3, 0x4a, 0x6a, 0x3b, 0xb3,
	0x5b, 0xea, 0x16, 0xa7, 0xb1, 0x05, 0xb2, 0x0d, 0xbf, 0xe4, 0xe7, 0x2c, 0x2a, 0x7f, 0x63, 0x8e,
	0xab, 0xf2, 0x3b, 0x42, 0x39, 0x3e, 0xa2, 0xc2, 0x35, 0x07, 0x7a, 0xac, 0xca, 0x0a, 0x8a, 0x59,
	0x6c, 0x3d, 0xd4, 0x69, 0x82, 0x98, 0x94, 0x64, 0x5d, 0x5b, 0x6c, 0x0d, 0xc0, 0xaf, 0x50, 0x76,
	0xa9, 0xef, 0x4f, 0x55, 0x60, 0x25, 0xcf, 0x62, 0xab, 0xae, 0x89, 0x94, 0x94, 0xc8, 0x33, 0x12,
	0x5e, 0xe7, 0xa0, 0x3e, 0xa2, 0x17, 0x9d, 0xfd, 0x16, 0xb1, 0x01, 0x85, 0x7f, 0x40, 0x45, 0x49,
	0xc3, 0xf0, 0x27, 0x3f, 0x60, 0x66, 0x36, 0x9e, 0xab, 0x6e, 0xce, 0x75, 0xb3, 0xd8, 0x6a, 0x69,
	0xd6, 0xb9, 0xe6, 0x0e, 0xcc, 0x0b, 0x34, 0x7e, 0x89, 0x54, 0xbf, 0x61, 0x96, 0x72, 0xdd, 0x27,
	0xa6, 0xfd, 0xb3, 0xd8, 0x7a, 0x64, 0x3a, 0xcb, 0x2f, 0x12, 0xe9, 0x9c, 0x88, 0x77, 0x5a, 0x75,
	0x37, 0xe2, 0x9d, 0x36, 0xb1, 0x15, 0x04, 0x1f, 0xa3, 0x0c, 0x75, 0x38, 0xcc, 0x5b, 0xae, 0xfb,
	0xa9, 0x22, 0xa2, 0x8e, 0x4a, 0xf9, 0xa9, 0x26, 0xa2, 0x0e, 0x5f, 0x49, 0xb4, 0x0f, 0x44, 0x07,
	0x2d, 0x25, 0x0c, 0x04, 0x77, 0x59, 0xa7, 0xc7, 0x2f, 0x88, 0xad, 0x08, 0xf0, 0x10, 0x65, 0x29,
	0x63, 0x6a, 0x3e, 0x33, 0xbb, 0xe5, 0xf6, 0xfd, 0x46, 0xd2, 0x45, 0xd4, 0x38, 0x64, 0x2c, 0xe0,
	0x61, 0x08, 0xe7, 0x07, 0xf7, 0x59, 0x6c, 0x7d, 0x60, 0xe2, 0x32, 0x16, 0xac, 0x08, 0xdc, 0x69,
	0xd5, 0x99, 0x38, 0xe7, 0xc4, 0x06, 0x08, 0xf9, 0x35, 0x83, 0x0a, 0x86, 0x08, 0x7f, 0xbf, 0x58,
	0x32, 0x3d, 0x0d, 0x2a, 0x1f, 0xa3, 0x99, 0xc5, 0xd6, 0x13, 0x4d, 0xad, 0xe5, 0xe4, 0x6a, 0x83,
	0x69, 0xa9, 0xe8, 0xed, 0x16, 0x59, 0xac, 0x67, 0x0f, 0x15, 0xa8, 0x8e, 0x63, 0x26, 0xe4, 0x23,
	0x18, 0x7e, 0xad, 0xba, 0x2a, 0xbd, 0x51, 0x24, 0xf3, 0x43, 0x1f, 0x5b, 0xc4, 0x9e, 0xc3, 0xf0,
	0x87, 0x28, 0x43, 0xa5, 0x84, 0x01, 0x29, 0xb7, 0xb7, 0x56, 0x94, 0x09, 0x36, 0x59, 0x2f, 0x39,
	0x95, 0xd2, 0x56, 0x3f, 0xf8, 0x05, 0xca, 0x05, 0x6a, 0x5d, 0x60, 0x04, 0xca, 0xed, 0x07, 0xc9,
	0xd0, 0x6b, 0x9b, 0xa5, 0xef, 0x1c, 0x40, 0xd9, 0xfa, 0x0f, 0x7f, 0x8c, 0xb2, 0x01, 0x0f, 0x65,
	0x25, 0x07, 0x6d, 0xaa, 0xdd, 0x10, 0x5f, 0xe1, 0x61, 0x17, 0x95, 0xbf, 0x0d, 0xbf, 0x8b, 0x4d,
	0xcd, 0x27, 0x6d, 0x6a, 0xfb, 0xdf, 0x0c, 0xca, 0x1e, 0x87, 0x3c, 0xc0, 0xdf, 0xa2, 0xb5, 0x97,
	0x3c, 0x5a, 0x5c, 0xc1, 0x98, 0xac, 0x38, 0xeb, 0xd2, 0x43, 0x51, 0x7d, 0xff, 0x56, 0x1f, 0x75,
	0xfc, 0xcf, 0x51, 0xf1, 0x05, 0x77, 0x41, 0x79, 0x27, 0xd6, 0xcd, 0x86, 0x7e, 0xae, 0x1a, 0xf3,
	0xb7, 0xac, 0xf1, 0x99, 0x7a, 0xcb, 0xf0, 0x01, 0xca, 0x7e, 0x25, 0x3c, 0x07, 0xaf, 0xb0, 0xaf,
	0xc4, 0xbd, 0x82, 0xcc, 0x0e, 0xa5, 0xec, 0xc1, 0x5d, 0x86, 0x6f, 0x6c, 0x60, 0xf5, 0x96, 0xf2,
	0xe2, 0x1e, 0xda, 0x30, 0x6c, 0xa6, 0x6b, 0xb7, 0xf0, 0xdd, 0xa5, 0xe7, 0xb8, 0x8f, 0xd6, 0xbf,
	0xe6, 0x61, 0x64, 0xae, 0x4c, 0x3f, 0xc0, 0x3b, 0xc9, 0xa8, 0xa5, 0x3b, 0x75, 0x55, 0xba, 0x64,
	0xf3, 0xcd, 0x1f, 0xff, 0xfc, 0x92, 0x7e, 0x87, 0x6c, 0x34, 0x15, 0xaa, 0x39, 0x1f, 0xf0, 0x6e,
	0xf5, 0xed, 0x5f, 0xb5, 0x7b, 0x6f, 0x2f, 0x6b, 0xa9, 0xdf, 0x2f, 0x6b, 0xa9, 0x3f, 0x2f, 0x6b,
	0xa9, 0xdf, 0xfe, 0xae, 0xdd, 0xfb, 0x2e, 0xab, 0x9c, 0xfa, 0x79, 0xe0, 0x78, 0xfc, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x65, 0xbb, 0x29, 0xb2, 0x97, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	GetStaffInfo(ctx context.Context, in *StaffInfoReq, opts ...grpc.CallOption) (*StaffInfoReply, error)
	DelStaff(ctx context.Context, in *StaffInfoReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetAppSecret(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*AppReply, error)
	GetAppSkipUrls(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*SkipUrlsReply, error)
	TestValidator(ctx context.Context, in *ValidateReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetStaffInfo(ctx context.Context, in *StaffInfoReq, opts ...grpc.CallOption) (*StaffInfoReply, error) {
	out := new(StaffInfoReply)
	err := c.cc.Invoke(ctx, "/styd.service.user.v1.User/GetStaffInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelStaff(ctx context.Context, in *StaffInfoReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/styd.service.user.v1.User/DelStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/styd.service.user.v1.User/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAppSecret(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*AppReply, error) {
	out := new(AppReply)
	err := c.cc.Invoke(ctx, "/styd.service.user.v1.User/GetAppSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetAppSkipUrls(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*SkipUrlsReply, error) {
	out := new(SkipUrlsReply)
	err := c.cc.Invoke(ctx, "/styd.service.user.v1.User/GetAppSkipUrls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) TestValidator(ctx context.Context, in *ValidateReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/styd.service.user.v1.User/TestValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	GetStaffInfo(context.Context, *StaffInfoReq) (*StaffInfoReply, error)
	DelStaff(context.Context, *StaffInfoReq) (*empty.Empty, error)
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	GetAppSecret(context.Context, *AppReq) (*AppReply, error)
	GetAppSkipUrls(context.Context, *AppReq) (*SkipUrlsReply, error)
	TestValidator(context.Context, *ValidateReq) (*empty.Empty, error)
}

// UnimplementedUserServer can be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (*UnimplementedUserServer) GetStaffInfo(ctx context.Context, req *StaffInfoReq) (*StaffInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffInfo not implemented")
}
func (*UnimplementedUserServer) DelStaff(ctx context.Context, req *StaffInfoReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelStaff not implemented")
}
func (*UnimplementedUserServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedUserServer) GetAppSecret(ctx context.Context, req *AppReq) (*AppReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSecret not implemented")
}
func (*UnimplementedUserServer) GetAppSkipUrls(ctx context.Context, req *AppReq) (*SkipUrlsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSkipUrls not implemented")
}
func (*UnimplementedUserServer) TestValidator(ctx context.Context, req *ValidateReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestValidator not implemented")
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_GetStaffInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetStaffInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/styd.service.user.v1.User/GetStaffInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetStaffInfo(ctx, req.(*StaffInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/styd.service.user.v1.User/DelStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelStaff(ctx, req.(*StaffInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/styd.service.user.v1.User/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAppSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAppSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/styd.service.user.v1.User/GetAppSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAppSecret(ctx, req.(*AppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetAppSkipUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetAppSkipUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/styd.service.user.v1.User/GetAppSkipUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetAppSkipUrls(ctx, req.(*AppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_TestValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).TestValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/styd.service.user.v1.User/TestValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).TestValidator(ctx, req.(*ValidateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "styd.service.user.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStaffInfo",
			Handler:    _User_GetStaffInfo_Handler,
		},
		{
			MethodName: "DelStaff",
			Handler:    _User_DelStaff_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _User_Ping_Handler,
		},
		{
			MethodName: "GetAppSecret",
			Handler:    _User_GetAppSecret_Handler,
		},
		{
			MethodName: "GetAppSkipUrls",
			Handler:    _User_GetAppSkipUrls_Handler,
		},
		{
			MethodName: "TestValidator",
			Handler:    _User_TestValidator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func (m *StaffInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaffInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaffInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ShopId != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.ShopId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StaffInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaffInfoReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StaffInfoReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Birthday) > 0 {
		i -= len(m.Birthday)
		copy(dAtA[i:], m.Birthday)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Birthday)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NickName) > 0 {
		i -= len(m.NickName)
		copy(dAtA[i:], m.NickName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.NickName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StaffName) > 0 {
		i -= len(m.StaffName)
		copy(dAtA[i:], m.StaffName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.StaffName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sappkey) > 0 {
		i -= len(m.Sappkey)
		copy(dAtA[i:], m.Sappkey)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Sappkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AppReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Appsecret) > 0 {
		i -= len(m.Appsecret)
		copy(dAtA[i:], m.Appsecret)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Appsecret)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Appkey) > 0 {
		i -= len(m.Appkey)
		copy(dAtA[i:], m.Appkey)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Appkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SkipUrlsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkipUrlsReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkipUrlsReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addr) > 0 {
		for iNdEx := len(m.Addr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Age != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x28
	}
	if m.Sex != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Sex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Address) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Urls) > 0 {
		for iNdEx := len(m.Urls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Urls[iNdEx])
			copy(dAtA[i:], m.Urls[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.Urls[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Resp) > 0 {
		for iNdEx := len(m.Resp) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resp[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Reply != nil {
		{
			size, err := m.Reply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.App != nil {
		{
			size, err := m.App.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mobile) > 0 {
		i -= len(m.Mobile)
		copy(dAtA[i:], m.Mobile)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Mobile)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StaffInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	if m.ShopId != 0 {
		n += 1 + sovUser(uint64(m.ShopId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StaffInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovUser(uint64(m.Id))
	}
	l = len(m.StaffName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Birthday)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sappkey)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Appkey)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Appsecret)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SkipUrlsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ValidateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovUser(uint64(m.Sex))
	}
	if m.Age != 0 {
		n += 1 + sovUser(uint64(m.Age))
	}
	if len(m.Addr) > 0 {
		for _, e := range m.Addr {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.App != nil {
		l = m.App.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Reply != nil {
		l = m.Reply.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.Resp) > 0 {
		for _, e := range m.Resp {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if len(m.Urls) > 0 {
		for _, s := range m.Urls {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StaffInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaffInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaffInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaffInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaffInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaffInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaffName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaffName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthday = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sappkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sappkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Appsecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Appsecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkipUrlsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkipUrlsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkipUrlsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr, &Address{})
			if err := m.Addr[len(m.Addr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.App == nil {
				m.App = &AppReq{}
			}
			if err := m.App.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reply == nil {
				m.Reply = &SkipUrlsReply{}
			}
			if err := m.Reply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resp = append(m.Resp, &AppReply{})
			if err := m.Resp[len(m.Resp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Urls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Urls = append(m.Urls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
